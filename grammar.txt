--------------------------------------------------

statements   : NEWLINE statement (NEWLINE+ expr) NEWLINE

statement    : KEYWORD:return expr
             : KEYWORD:continue
             : KEYWORD:break
             : expr

expr        : KEYWORD:var IDENTIFIER EQ expr
            : comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)

comp-expr   : not comp-expr
            : arith-expr ((EE|LT|LTE|GT|GTE) arith-expr)

arith-expr  : term ((MINUS|PLUS) term)

term        : factor ((DIV|MUl) factor)

factor      : (PLUS|MINUS) power
            : power

power       : call (POW factor)

call        : atom (LPAREN (expr (COMMA expr (....))) RPAREN)

atom        : LPAREN expr RPAREN
            : INT|FLOAT|STRING|IDENTIFIER
            : if-expr
            : for-expr
            : while-expr
            : func-def
            : list-expr

list-expr   : LSQUARE (expr (COMMA expr (....)) RSQUARE

if-expr     : KEYWORD:if expr KEYWORD:then
              (statement if-expr-b | if-expr-c)
            | (NEWLINE statements KEYWORD:end | if-expr-b | if-expr-c)

if-expr-b   : KEYWORD:elif expr KEYWORD:then
              (statement if-expr-b | if-expr-c)
            | (NEWLINE statements KEYWORD:end | if-expr-b | if-expr-c)

if-expr-c   : KEYWORD:else
              statement
            | (NEWLINE statements KEYWORD:end)

for-expr    : KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr
            : (KEYWORD:step expr) KEYWORD:then
              statement
            | (NEWLINE statements KEYWORD:end)

while-expr  : KEYWORD:while expr KEYWORD:then
              statement
            | (NEWLINE statements KEYWORD:end)

func-def    : KEYWORD:fun IDENTIFIER LPAREN (IDENTIFIER (COMMA IDENTIFIER (....))) RPAREN
              (ARROW expr)
            | (NEWLINE statements KEYWORD:end)


expr - выражение
term - частное|слагаемое
factor - коэфициенты

--------------------------------------------------